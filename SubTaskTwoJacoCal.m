%% calculate the Rt_I matrix in symbol
%% arm parameters
% i=1
aerialmanipulator.alpha0 = 0; aerialmanipulator.a0 = 0.01475;
aerialmanipulator.d1 = 0.15665; aerialmanipulator.theta1 = 0;
% i=2
aerialmanipulator.alpha1 = pi/2; aerialmanipulator.a1 = 0;
aerialmanipulator.d2 = 0; aerialmanipulator.theta2 = 0;
% i=3
aerialmanipulator.alpha2 = 0; aerialmanipulator.a2 = 0.083;
aerialmanipulator.d3 = 0; aerialmanipulator.theta3 = pi/2;
% i=4
aerialmanipulator.alpha3 = pi/2; aerialmanipulator.a3 = 0;
aerialmanipulator.d4 = 0.068; aerialmanipulator.theta4 = pi/2;
% define symbol variables
syms roll pitch yaw
syms th1 th2 th3 th4
%% sub rotation matrix
% bse transform
Base_T =[0.7071 0.7071 0 0; ...
    -0.7071 0.7071 0 0; ...
    0 0 -1.0000 0; ...
    0 0 0 1];
% arm transform matrix
T1_0 = [cos(th1) -sin(th1) 0 aerialmanipulator.a0; ...
    cos(aerialmanipulator.alpha0)*sin(th1) cos(aerialmanipulator.alpha0)*cos(th1) -sin(aerialmanipulator.alpha0) -sin(aerialmanipulator.alpha0)*aerialmanipulator.d1; ...
    sin(aerialmanipulator.alpha0)*sin(th1) sin(aerialmanipulator.alpha0)*cos(th1) cos(aerialmanipulator.alpha0) cos(aerialmanipulator.alpha0)*aerialmanipulator.d1; ...
    0 0 0 1];
T2_1 = [cos(th2) -sin(th2) 0 aerialmanipulator.a1; ...
    cos(aerialmanipulator.alpha1)*sin(th2) cos(aerialmanipulator.alpha1)*cos(th2) -sin(aerialmanipulator.alpha1) -sin(aerialmanipulator.alpha1)*aerialmanipulator.d2; ...
    sin(aerialmanipulator.alpha1)*sin(th2) sin(aerialmanipulator.alpha1)*cos(th2) cos(aerialmanipulator.alpha1) cos(aerialmanipulator.alpha1)*aerialmanipulator.d2; ...
    0 0 0 1];
T3_2 = [-sin(th3) -cos(th3) 0 aerialmanipulator.a2; ...
    cos(aerialmanipulator.alpha2)*cos(th3) -cos(aerialmanipulator.alpha2)*sin(th3) -sin(aerialmanipulator.alpha2) -sin(aerialmanipulator.alpha2)*aerialmanipulator.d3; ...
    sin(aerialmanipulator.alpha2)*cos(th3) -sin(aerialmanipulator.alpha2)*sin(th3) cos(aerialmanipulator.alpha2) cos(aerialmanipulator.alpha2)*aerialmanipulator.d3; ...
    0 0 0 1];
T4_3 = [-sin(th4) -cos(th4) 0 aerialmanipulator.a3; ...
    cos(aerialmanipulator.alpha3)*cos(th4) -cos(aerialmanipulator.alpha3)*sin(th4) -sin(aerialmanipulator.alpha3) -sin(aerialmanipulator.alpha3)*aerialmanipulator.d4; ...
    sin(aerialmanipulator.alpha3)*cos(th4) -sin(aerialmanipulator.alpha3)*sin(th4) cos(aerialmanipulator.alpha3) cos(aerialmanipulator.alpha3)*aerialmanipulator.d4; ...
    0 0 0 1];
Tt_0 = T1_0 * T2_1 * T3_2 * T4_3;
% Z-Y-Z fix coordina
RX = [1 0 0; 0 cos(roll) -sin(roll); 0 sin(roll) cos(roll)];
RY = [cos(pitch) 0 sin(pitch); 0 1 0; -sin(pitch) 0 cos(pitch)];
RZ = [1 0 0; 0 cos(yaw) -sin(yaw); 0 sin(yaw) cos(yaw)];
Rb_I = RZ * RY * RX;
